function [ForceFile] = importForce_KDA(filename, gain, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [ForceFile] = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [ForceFile] = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [ForceFile] = importForce_KDA('_000.KDA',6, 7206);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/04/28 10:19:52
% Oct 11 2017 Edited by Casey Wiens, cwiens32@gmail.com

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 7;
    endRow = inf;
end
if ~exist('gain','var')
    commandwindow
    gain = input('Please input what the amp gain was set to: ');
end


%% Import text data collection information
% Open the text file.
fileID = fopen(filename,'r');
startTextRow = 2;

% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpecText = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textArray = textscan(fileID, formatSpecText, startRow(1)-startTextRow(1), 'Delimiter', '\t', 'TextType', 'string', 'HeaderLines', startTextRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startTextRow)
    frewind(fileID);
    textArrayBlock = textscan(fileID, formatSpecText, startRow(block)-startTextRow(block), 'Delimiter', '\t', 'TextType', 'string', 'HeaderLines', startTextRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(textArray)
        textArray{col} = [textArray{col};textArrayBlock{col}];
    end
end
fclose(fileID);

% convert text data
textInfo = textArray{1,1};


%% Import numeric data
fileID = fopen(filename,'r');

% Format string for each line of text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

% Close the text file.
fclose(fileID);

%% ASSUME DEFAULT GAINS FOR FORCE PLATES:
% set x, y and z volts for each plate
FP1V = [7.768 7.755 3.857];
FP2V = [7.86 7.81 3.84];
switch gain
    case 1
        GainPlate_1 = 100./FP1V;
        GainPlate_2 = 100./FP2V;
    case 2
        GainPlate_1 = 500./FP1V;
        GainPlate_2 = 500./FP2V;
    case 3
        GainPlate_1 = 1000./FP1V;
        GainPlate_2 = 1000./FP2V;
    case 4
        GainPlate_1 = 5000./FP1V;
        GainPlate_2 = 5000./FP2V;
end
        

%% Allocate imported array to column variable names
ForceFile.DataInfo = textInfo;
ForceFile.FP1_x1 = dataArray{:, 1}*GainPlate_1(1);
ForceFile.FP1_x2 = dataArray{:, 2}*GainPlate_1(1);
ForceFile.FP1_y1 = dataArray{:, 3}*GainPlate_1(2);
ForceFile.FP1_y2 = dataArray{:, 4}*GainPlate_1(2);
ForceFile.FP1_z1 = dataArray{:, 5}*GainPlate_1(3);
ForceFile.FP1_z2 = dataArray{:, 6}*GainPlate_1(3);
ForceFile.FP1_z3 = dataArray{:, 7}*GainPlate_1(3);
ForceFile.FP1_z4 = dataArray{:, 8}*GainPlate_1(3);
ForceFile.FP2_x1 = dataArray{:, 9}*GainPlate_2(1);
ForceFile.FP2_x2 = dataArray{:, 10}*GainPlate_2(1);
ForceFile.FP2_y1 = dataArray{:, 11}*GainPlate_2(2);
ForceFile.FP2_y2 = dataArray{:, 12}*GainPlate_2(2);
ForceFile.FP2_z1 = dataArray{:, 13}*GainPlate_2(3);
ForceFile.FP2_z2 = dataArray{:, 14}*GainPlate_2(3);
ForceFile.FP2_z3 = dataArray{:, 15}*GainPlate_2(3);
ForceFile.FP2_z4 = dataArray{:, 16}*GainPlate_2(3);
ForceFile.AMASS_IO = dataArray{:, 17};


